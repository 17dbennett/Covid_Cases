import requests
import json
import numpy as np

#create a class to view results per country and covid cases
class CountryCovidResults():
    def __init__(self, country_name):
        self.country_name = country_name
        self.daylst = []
        self.confirmed_cases = []
        self.new_cases = []
        self.high = 0
        self.dayzero = ""
        self.maxmonthname = ""
        self.minmonthname = ""
        self.__confirmcases()
        self.__findnewcases()
        self.__populate_month_stats()
        self.__maxmonth()
        self.__minmonth()
    # Get data from API and go through multiple keys. -- need to get key 3.    
    def __confirmcases(self):
        url = "https://covid-api.mmediagroup.fr/v1/history?country="+self.country_name+"&status=confirmed"
        request = requests.get(url)
        lst = json.loads(request.text)
        
        key1 = "All"
        key2 = "dates"
        #key3 = day
        
        self.confirmed_cases = []
        self.daylst = []
        for key3 in lst[key1][key2]:
            if key3 <= "2021-09-30":
                self.confirmed_cases.append(float(lst[key1][key2][key3]))
                self.daylst.append(key3)
        self.confirmed_cases.reverse() # reverve the list to get it in order.
        self.daylst.reverse() # reverve the list to get it in order.
        #print(self.confirmed_cases)
        
    # calculate new cases by taking the current day and subracting previous day.
    def __findnewcases(self):
        self.new_cases.append(self.confirmed_cases[0])
        for i in range(1,len(self.confirmed_cases)):
            newcase = float(self.confirmed_cases[i]-self.confirmed_cases[i-1])
            self.new_cases.append(newcase)
            if (newcase) > self.high:
                self.high = newcase
                self.day = self.daylst[i]
                
            if newcase == 0:
                self.dayzero = self.daylst[i]
    
    # create a dictionary with keys of the month and year, fill with total value of new cases
    def __populate_month_stats(self):
        self.month_data_dict = dict()
        for i in range(len(self.daylst)):
            month = self.daylst[i][:7]
            if month in self.month_data_dict:
                self.month_data_dict[month] += self.new_cases[i]
            else:
                self.month_data_dict[month] = self.new_cases[i]
            # print("Month", month)
            # print(month_data_dict[month])
                
    # group the lists into months, find the month with most amout of cases.
    def __maxmonth(self):
        max_count = 0
        for month, totalcases in self.month_data_dict.items():
            if totalcases > max_count:
                max_count = totalcases
                self.maxmonthname = month
            
    
    
    
    # group the lists into months, find the month with least amout of cases.           
    def __minmonth(self):
        min_count = float("inf")
        for month, totalcases in self.month_data_dict.items():
            if totalcases < min_count:
                min_count = totalcases
                self.minmonthname = month
    
    
            
    #print the results into the view.
    def print_results(self):
        print("\n---Covid confirmed cases statistics---")
        print("Country = ", self.country_name)
        print("Confirmed Cases: ", self.confirmed_cases[-1])
        print("Max = ", self.high , "Date :", self.day)
        print("Average for data: ", round(np.mean(self.confirmed_cases)))
        print("Last day of 0: ", self.dayzero)
        # Month with the highest new number of confirmed cases:
        print("The month with the highest new cases: Month:", self.maxmonthname[5:7], "; Year :", self.maxmonthname[:4])
        # Month with the lowest new number of confirmed cases:
        self.__minmonth()
        print("The month with the least new cases: ", self.minmonthname[5:7], "; Year :", self.minmonthname[:4])
     
    #save results to a dictionary, then save the dictionary to a JSON file.   
    def jsondump(self):
        results = {}
        countrydictionary = {}
        countrydictionary["Country"] = self.country_name
        countrydictionary["Confirmed_Cases"] = self.confirmed_cases[-1]
        countrydictionary["Date_of_Max"] = self.day
        countrydictionary["Max"] = self.high
        countrydictionary["Last_0_cases"] = self.dayzero
        countrydictionary["MaxMonth"] = self.maxmonthname[5:7]
        countrydictionary["MaxYear"] = self.maxmonthname[:4]
        countrydictionary["MinMonth"] = self.minmonthname[5:7]
        countrydictionary["MinYear"] = self.minmonthname[:4]
        
        results[country + "_results"] = countrydictionary
        
        # put the file into a json
        out_file = open("HW3/"+ country+".json", "w+")
            
        json.dump(results,out_file, indent = 4)



#Look up countries    
mycountries = ["US", "Uganda", "Russia"]

#cycle through each country 1 at a time. 
for country in mycountries:
    stats = CountryCovidResults(country)
    stats.print_results()
    stats.jsondump()
